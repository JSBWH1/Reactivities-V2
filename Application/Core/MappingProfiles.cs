using System;
using Application.Activities.DTOs;
using AutoMapper;
using Domain;

namespace Application.Core;

public class MappingProfiles : Profile
{
    public MappingProfiles()
    {
        CreateMap<Activity, Activity>();
        CreateMap<CreateActivityDto, Activity>();
        CreateMap<EditActivityDto, Activity>(); 
    }   

}




// This file utilises the 'AutoMapper' library to automatically copy data between classes. 

/*

       +---------------------+
       | CreateActivityDto   |  <- Data received from the client (API)
       |---------------------|
       | Title: "Team Meet"  |
       | Date: 21/10/2025    |
       | Description: "..."  |
       +---------------------+
                 |
                 |  AutoMapper uses CreateMap<CreateActivityDto, Activity>()
                 v
       +---------------------+
       | Activity            |  <- Domain entity ready to save to DB
       |---------------------|
       | Id: generated by DB |
       | Title: "Team Meet"  |
       | Date: 21/10/2025    |
       | Description: "..."  |
       | CreatedDate: now()  |
       +---------------------+
                 |
                 |  DbContext.Add(activity) -> Database
                 v
       +---------------------+
       | Database Table      |
       | Activities          |
       +---------------------+


-----------------------------------------------------------------------------------------------


       +---------------------+
       | Activity (existing) |
       |---------------------|
       | Id: 101             |
       | Title: "Old Title"  |
       | Date: 20/10/2025    |
       | Description: "Old"  |
       | CreatedDate: 15/10  |
       +---------------------+

The user submits an updated object (could be from an API DTO or even an Activity object from the client):

       +---------------------+
       | Activity (update)   |  <- Contains new values
       |---------------------|
       | Title: "New Title"  |
       | Date: 21/10/2025    |
       | Description: "Updated" |
       +---------------------+


Using the mapping: 
    CreateMap<Activity, Activity>();
    _mapper.Map(updatedActivity, existingActivity);


What happens:

    1. AutoMapper copies matching properties from updatedActivity → existingActivity.
    2. It does not overwrite properties that don’t exist in the source (Id, CreatedDate remain intact).

After mapping:


       +---------------------+
       | Activity (existing) |
       |---------------------|
       | Id: 101             |  <- unchanged
       | Title: "New Title"  |
       | Date: 21/10/2025    |
       | Description: "Updated" |
       | CreatedDate: 15/10  |  <- unchanged
       +---------------------+




  +---------------------+       AutoMapper       +---------------------+
  | Activity (update)   | --------------------> | Activity (existing) |
  |---------------------|                        |---------------------|
  | Title: "New Title"  |                        | Title: "Old Title"  |
  | Date: 21/10/2025    |                        | Date: 20/10/2025    |
  | Description: "Updated"|                     | Description: "Old"  |
  +---------------------+                        | Id: 101             |
                                                 | CreatedDate: 15/10 |
                                                 +---------------------+
AutoMapper just copies the properties you want updated.


*/ 